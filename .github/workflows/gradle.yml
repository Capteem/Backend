name: Java CI with Gradle and CodeDeploy

env:
  AWS_REGION: us-east-1
  S3_BUCKET_NAME: plog-action-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: plog-spring-boot
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: plog-codedeploy-deployment-group

on:
  push:
    branches: [ "feature" ]
  pull_request:
    branches: [ "develop"]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # GitHub Actions에서 Gradle을 최적으로 사용하도록 구성합니다.1
      # 자세한 내용은 https://github.com/gradle/actions/blob/main/setup-gradle/README.md를 참조하세요.
      - name: Gradle 설정
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
        with:
          gradle-version: '8.7'

      # application.properties 파일을 GitHub 시크릿을 사용하여 생성합니다.
      - name: application.properties 생성
        run: echo "${{secrets.APPLICATION_PROPERTIES}}" > src/main/resources/application.properties

      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle Wrapper로 빌드
        run: ./gradlew build

      - name: 아티팩트 업로드
        uses: actions/upload-artifact@v2
        with:
          name: plog
          path: build/libs

      - name: Make Directory
        run: mkdir -p deploy

      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy

          # appspec.yml 파일 복사
      - name: Copy appspec.yml
        run: cp appspec.yml ./deploy


          # script files 복사
      - name: Copy script
        run: cp ./scripts/*.sh ./deploy

      - name: Make zip file
        run: zip -r ./plog.zip ./deploy
        shell: bash
      - name: AWS 액세스 키 및 시크릿 키 설정
        run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: S3 업로드
        run: aws s3 cp --region ${{ env.AWS_REGION }} ./plog.zip s3://${{ env.S3_BUCKET_NAME }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: 아티팩트 다운로드
        uses: actions/download-artifact@v2
        with:
          name: plog
          path: build

      - name: AWS CLI 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli --upgrade --user

      - name: AWS CodeDeploy에 배포
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --s3-location bucket=${{ env.S3_BUCKET_NAME }},bundleType=zip,key=build/plog.zip
